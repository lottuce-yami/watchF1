@using F1Project.Data.Database.Services
@typeparam T where T : F1Project.Data.Database.Types.DatabaseType, new()
@inject Service<T> Service
@inject NavigationManager Nav

<section class="filters">
    @foreach (var property in TypeProperties)
    {
        <label for="@property">
            <select name="@property" id="@property">
                @foreach (var option in Service.GetUniqueBy(property, OrderedProperties.Contains(property)))
                {
                    <option @onchange="() => ToQuery(property, option.ToString())">
                        @option
                    </option>
                }
            </select>
        </label>
    }
</section>

@code
{
    [Parameter]
    public List<T> List { get; set; } = null!;

    [Parameter]
    public string[] ExcludedProperties { get; set; } = {};
    
    [Parameter]
    public string[] OrderedProperties { get; set; } = {};
    
    private string[] TypeProperties { get; set; } = {};

    protected override void OnParametersSet()
    {
        TypeProperties = typeof(T).GetProperties().
            Where(p => !ExcludedProperties.Contains(p.Name)).
            Select(p => p.Name).
            ToArray();
    }

    private void ToQuery(string property, string? value)
    {
        Nav.NavigateTo(Nav.GetUriWithQueryParameter(property, value));
    }
}