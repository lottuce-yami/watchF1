@using F1Project.Models
@using F1Project.Data.Options
@using Microsoft.Extensions.Options
@inject IOptionsMonitor<LiveOptions> LiveOptions
@inject IJSRuntime Js
@inject IHostEnvironment Environment

<PageTitle>
    @Title | watchF1
</PageTitle>
<main>
    <article id="video">
        <section id="player">
            @if (Live)
            {
                <iframe src="@PlayerSource" allow="fullscreen"></iframe>
            }
        </section>
        <section class="video-info">
            <h2>@Title</h2>
            @if (!Live)
            {
                <div>
                    <a @onclick="Download" role="button" title="Скачать">
                        <i class="fa-solid fa-download"></i>
                        Скачать
                    </a>
                    @if (Source!.Qualities.Any())
                    {
                        <select @bind="@DownloadedFile">
                            @foreach (var quality in Source!.Qualities)
                            {
                                <optgroup label="@quality.QualityName">
                                    @foreach (var audio in quality.Audios)
                                    {
                                        <option value="@audio.Value">
                                            @audio.Key
                                        </option>
                                    }
                                </optgroup>
                            }
                        </select>
                    }
                    else
                    {
                        DownloadedFile = PlayerSource;
                    }
                </div>
            }
        </section>
    </article>
</main>

@code
{
    [Parameter]
    public bool Live { get; set; }
    
    [Parameter]
    public Video? Video { get; set; }

    private Random Random => new();
    private string Storage => Environment.IsDevelopment() ? "./wwwroot/storage/" : "/home/anton/storage/";
    
    private string? Title { get; set; }
    private string? PlayerSource { get; set; }
    private Video.SourceModel? Source { get; set; }
    
    private string? DownloadedFile { get; set; }

    protected override void OnParametersSet()
    {
        if (!Live) Source = Video!.Source(Storage);
        PlayerSource = Live ? RandomServer() : Source!.PlayerSource;
        Title = Live ? LiveOptions.CurrentValue.Title : Video!.Title;
        if (!Live && Source!.Qualities.Any()) DownloadedFile = Source!.Qualities.Last().Audios.Last().Value;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Live) return;
        await Js.InvokeVoidAsync("getPlayer", PlayerSource, Video!.Preview(Storage));
    }
    
    private async void Download()
    {
        await Js.InvokeVoidAsync("download", DownloadedFile, Title);
    }

    private string RandomServer()
    {
        var servers = LiveOptions.CurrentValue.Servers;
        try
        {
            return servers[Random.Next(servers.Length)];
        }
        catch (IndexOutOfRangeException)
        {
            return string.Empty;
        }
    }
}
