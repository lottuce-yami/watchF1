@using F1Project.Data.Database.Services
@using F1Project.Data.Database.Types
@inherits LayoutComponentBase
@layout MainLayout
@inject UserService UserServ
@inject ProtectedLocalStorage LocalStorage
@inject NavigationManager Nav
@inject SettingService Settings

@if (IsConnected)
{
    if (IsAuthorized && User != null)
    {
        if (Nav.ToBaseRelativePath(Nav.Uri) == "live" &&
            !(User.Subscribed > 0 || Settings.Get("test").Value == "true"))
        {
            <h2>Оплатите доступ, чтобы смотреть трансляцию.</h2>
            <a href="account" role="button">
                <i class="fa-solid fa-user"></i>
                Аккаунт
                <i class="fa-solid fa-arrow-right-long"></i>
            </a>
        }
        else
        {
            <CascadingValue Value="User" Name="User">
                @Body
            </CascadingValue>
        }
    }
    else
    {
        <div class="auth-request">
            <h2>
                Авторизуйтесь, чтобы получить доступ к этой странице.
            </h2>
            @if (Nav.ToBaseRelativePath(Nav.Uri) == "live")
            {
                <p>
                    Для просмотра трансляции также необходимо иметь подписку.
                </p>
            }
            <a href="login" role="button">
                <i class="fa-brands fa-telegram"></i>
                Войти через Telegram
                <i class="fa-solid fa-arrow-right-long"></i>
            </a>
        </div>
    }
}
else
{
    <div class="loading">
        <svg class="spinner" viewBox="0 0 50 50">
          <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="5"></circle>
        </svg>
    </div>
}

@code {
    private bool IsConnected { get; set; }
    private bool IsAuthorized { get; set; }
    private User? User { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsConnected = true;
            await LoadAuthAsync();
            StateHasChanged();
        }
    }

    private async Task LoadAuthAsync()
    {
        try
        {
            var authFile = await LocalStorage.GetAsync<string>("tgAuth");
            var authValue = authFile.Success ? authFile.Value : null;
            if (authValue is null || string.IsNullOrWhiteSpace(authValue))
            {
                IsAuthorized = false;
            }
            else
            {
                IsAuthorized = UserServ.ValidateAuthKey(authValue.Split('#'));
                if (IsAuthorized)
                {
                    User = UserServ.Get(authValue.Split('#')[0]);
                }
            }
        }
        catch
        {
            IsAuthorized = false;
        }
    }
}