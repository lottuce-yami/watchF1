@page "/Videos"
@using F1Project.Models
@using F1Project.Data
@using System.Reflection
@using Microsoft.EntityFrameworkCore
@inject WatchF1Context DbContext
@inject NavigationManager Nav

<PageTitle>
    Записи | watchF1
</PageTitle>
<HeadContent>
    <meta name="description" content="Смотрите онлайн или скачайте записи сессий Формулы 1, Формулы 2 и Формулы 3 бесплатно на watchF1">
</HeadContent>

<div>
    <FilterForm Options="Options"/>
    <main class="video-list">
        <VideoList List="VideoList"/>
    </main>
</div>
@if (PageCount > 1)
{
    <section role="navigation">
        @if (Page != 0)
        {
            <a href="@Nav.GetUriWithQueryParameter("page", Page - 1)">
                <i class="fa-solid fa-arrow-left"></i>
            </a>
        }
        @for (var i = Page > 4 ? Page - 4 : 0; i < PageCount && i < Page + 4; i++)
        {
            <a href="@Nav.GetUriWithQueryParameter("page", i)" class="@(Page == i ? "active" : "")">
                @(i + 1)
            </a>
        }
        @if (Page != PageCount - 1)
        {
            <a href="@Nav.GetUriWithQueryParameter("page", Page + 1)">
                <i class="fa-solid fa-arrow-right"></i>
            </a>
        }
    </section>
}

@code
{
    private List<Video> VideoList { get; set; } = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public int Page { get; set; }

    private const int PageSize = 20;
    private int PageCount { get; set; }

    private Dictionary<string, string?[]> Options { get; } = new()
    {
        {"championship", Array.Empty<string>()}, 
        {"season", Array.Empty<string>()}, 
        {"grand_prix", Array.Empty<string>()}, 
        {"type", Array.Empty<string>()}
    };
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Championship { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Season { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "grand_prix")]
    public string? GrandPrix { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Type { get; set; }
    
    private void UpdateVideos()
    {
        var filters = GetType().GetProperties().
            Where(p => p.GetValue(this) != null && p.Name != "Page").
            ToDictionary(p => p.Name, p => p.GetValue(this)!.ToString());

        var videos = DbContext.Videos.AsEnumerable();
        foreach (var filter in filters)
        {
            videos = videos
                .Where(v => v[filter.Key].GetValue(v)!.ToString() == filter.Value);
        }
        VideoList = videos.ToList();
        VideoList.Reverse();
        
        PageCount = Math.DivRem(VideoList.Count, PageSize, out var remainder);
        if (remainder > 0) PageCount++;
        
        VideoList = VideoList.Skip(Page * PageSize).Take(PageSize).ToList();
    }
    
    protected override void OnParametersSet()
    {
        foreach (var option in Options.Keys)
        {
            Options[option] = DbContext.Database
                .SqlQueryRaw<string>($"select distinct {option} from videos")
                .ToArray();
        }
        
        UpdateVideos();
    }
}
