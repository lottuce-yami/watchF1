@page "/Videos"
@using F1Project.Models
@using F1Project.Data
@using Microsoft.EntityFrameworkCore
@inject WatchF1Context DbContext
@inject NavigationManager Nav

<PageTitle>
    Записи | watchF1
</PageTitle>
<HeadContent>
    <meta name="description" content="Смотрите онлайн или скачайте записи сессий Формулы 1, Формулы 2 и Формулы 3 бесплатно на watchF1">
</HeadContent>

<div>
    <FilterForm Options="Options"/>
    <main class="video-list">
        <VideoList List="VideoList"/>
    </main>
</div>
@if (PageCount > 1)
{
    <section role="navigation">
        @if (Page != 0)
        {
            <a href="@Nav.GetUriWithQueryParameter("page", Page - 1)">
                <i class="fa-solid fa-arrow-left"></i>
            </a>
        }
        @for (var i = Page > 4 ? Page - 4 : 0; i < PageCount && i < Page + 4; i++)
        {
            <a href="@Nav.GetUriWithQueryParameter("page", i)" class="@(Page == i ? "active" : "")">
                @(i + 1)
            </a>
        }
        @if (Page != PageCount - 1)
        {
            <a href="@Nav.GetUriWithQueryParameter("page", Page + 1)">
                <i class="fa-solid fa-arrow-right"></i>
            </a>
        }
    </section>
}

@code
{
    private List<Video> VideoList { get; set; } = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public int Page { get; set; }

    private const int PageSize = 20;
    private int PageCount { get; set; }

    private Dictionary<string, string?[]> Options { get; } = new()
    {
        {"championship", Array.Empty<string>()}, 
        {"season", Array.Empty<string>()}, 
        {"grand_prix", Array.Empty<string>()}, 
        {"type", Array.Empty<string>()}
    };
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Championship { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Season { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "grand_prix")]
    public string? GrandPrix { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Type { get; set; }
    
    private void UpdateVideos()
    {
        var videos = DbContext.Videos
            .WhereIf(Championship != null, v =>  v.Championship == Championship)
            .WhereIf(Season != null, v => v.Season == Season)
            .WhereIf(GrandPrix != null, v => v.GrandPrix == GrandPrix)
            .WhereIf(Type != null, v => v.Type == Type);
        
        PageCount = Math.DivRem(videos.Count(), PageSize, out var remainder);
        if (remainder > 0) PageCount++;
        
        VideoList = videos
            .OrderByDescending(v => v.Index)
            .Skip(Page * PageSize)
            .Take(PageSize)
            .ToList();
    }
    
    protected override void OnParametersSet()
    {
        var videos = DbContext.Videos;

        Options["championship"] = videos
            .Select(v => v.Championship)
            .Distinct()
            .ToArray();

        Options["season"] = videos
            .Select(v => v.Season)
            .Distinct()
            .ToArray();
        
        Options["grand_prix"] = videos
            .Select(v => v.GrandPrix)
            .Distinct()
            .ToArray();
        
        Options["type"] = videos
            .Select(v => v.Type)
            .Distinct()
            .ToArray();
        
        UpdateVideos();
    }
}
