@page "/Auth"
@using System.Security.Cryptography
@using System.Text
@using System.Web
@using F1Project.Data.Database.Services
@using F1Project.Data.Database.Types
@using F1Project.Data.Options
@using Microsoft.Extensions.Options
@inject IOptions<BotOptions> Bot
@inject UserService UserServ
@inject ProtectedLocalStorage LocalStorage
@inject NavigationManager Nav

@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "first_name")]
    public string? FirstName { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery (Name = "last_name")]
    public string? LastName { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Username { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery (Name = "photo_url")]
    public string? Photo { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "auth_date")]
    public int AuthDate { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Hash { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!CheckData())
            {
                Nav.NavigateTo("/");
            }
            else
            {
                var user = new User
                {
                    Id = Id ?? "",
                    FirstName = FirstName ?? "",
                    LastName = LastName,
                    Username = Username,
                    Photo = Photo,
                    AuthDate = AuthDate,
                    Hash = Hash ?? ""
                };
        
                UserServ.Authorize(user);
                await LocalStorage.SetAsync("tgAuth", $"{user.Id}#{Hash}");
        
                Nav.NavigateTo("live");
            }
        }
    }

    private bool CheckData()
    {
        if (string.IsNullOrWhiteSpace(Id))
        {
            return false;
        }

        try
        {
            var botToken = Bot.Value.Token;
            
            var decodedUrl = HttpUtility.UrlDecode(Nav.GetUriWithQueryParameter("hash", (string?) null));
            var queryParameters = decodedUrl.Split('?')[1].Split('&').ToList();
            queryParameters.Sort();
            var checkString = Encoding.UTF8.GetBytes(string.Join("\n", queryParameters));

            var sha256 = SHA256.Create();
            var secretKey = sha256.ComputeHash(Encoding.UTF8.GetBytes(botToken));

            var hmacSha256 = new HMACSHA256(secretKey);
            var rawHash = hmacSha256.ComputeHash(checkString);
            var generatedHash = rawHash.Aggregate(string.Empty, (current, b) => current + b.ToString("x2"));

            if (generatedHash != Hash)
            {
                throw new Exception("Data is not from Telegram!");
            }
            
            if (new DateTimeOffset().ToUnixTimeSeconds() - AuthDate > 86400)
            {
                throw new Exception("Data is outdated!");
            }

            return true;
        }
        catch
        {
            return false;
        }
    }
}