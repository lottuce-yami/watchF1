@page "/Auth"
@using System.Security.Cryptography
@using System.Text
@using System.Web
@using F1Project.Data
@using F1Project.Data.Options
@using F1Project.Models
@using Microsoft.Extensions.Options
@inject IOptions<BotOptions> Bot
@inject WatchF1Context DbContext
@inject ProtectedLocalStorage LocalStorage
@inject NavigationManager Nav

@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public long? Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "first_name")]
    public string? FirstName { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "last_name")]
    public string? LastName { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Username { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "photo_url")]
    public string? Photo { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "auth_date")]
    public int? AuthDate { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Hash { get; set; }

    private bool CheckData()
    {
        try
        {
            if (Id == null || FirstName == null || AuthDate == null || Hash == null)
                throw new Exception("Not all of the required values were provided");
            
            if (new DateTimeOffset().ToUnixTimeSeconds() - AuthDate > 86400)
                throw new Exception("Data is outdated");
            
            var decodedUrl = HttpUtility
                .UrlDecode(Nav.GetUriWithQueryParameter("hash", (string?) null));
            var queryParameters = decodedUrl
                .Split('?')[1]
                .Split('&');
            Array.Sort(queryParameters);
            var checkString = Encoding.UTF8.GetBytes(string.Join("\n", queryParameters));

            var sha256 = SHA256.Create();
            var secretKey = sha256
                .ComputeHash(Encoding.UTF8.GetBytes(Bot.Value.Token));

            var hmacSha256 = new HMACSHA256(secretKey);
            var generatedHash = hmacSha256
                .ComputeHash(checkString)
                .Aggregate(string.Empty, (current, b) => current + b.ToString("x2"));

            if (generatedHash != Hash)
                throw new Exception("Data is not from Telegram");
            
            return true;
        }
        catch
        {
            return false;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!CheckData())
            {
                Nav.NavigateTo("/");
            }
            else
            {
                var user = new User
                {
                    Id = (long) Id!,
                    FirstName = FirstName!,
                    LastName = LastName,
                    Username = Username,
                    Photo = Photo
                };
        
                DbContext.Authorize(user);
                await LocalStorage.SetAsync("tgAuth", user.Id);
        
                Nav.NavigateTo("live");
            }
        }
    }
}